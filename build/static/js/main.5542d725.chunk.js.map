{"version":3,"sources":["vika.js","App.js","reportWebVitals.js","index.js"],"names":["config","VikaController","props","vika","Vika","token","fieldKey","requestTimeout","host","this","datasheet","params","Promise","resolve","reject","records","query","viewId","then","res","success","message","data","error","catch","err","sort","recordIds","fields","filterByFormula","maxRecords","cellFormat","record","queryAll","create","update","delete","file","upload","moment","locale","App","React","useState","visible","setVisible","confirmLoading","curDay","updateDay","selectTime","updateSelectTime","list","updateList","currentKey","updateCurrentKey","VikaAddHandle","a","text","timeStamp","add","handleOk","index","findIndex","item","isSame","formatTime","str","str2","title","startTime","format","recordId","refresh","handleCancel","console","log","start","end","seconds","mintus","hours","start_date","end_date","diff","parseInt","Math","round","getList","splice","length","zhCN","className","onOk","onCancel","footer","onClick","type","style","display","RangePicker","value","onChange","date","showNow","dateCellRender","i","getListData","undefined","status","onSelect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5542d725.chunk.js","sourcesContent":["import {Vika} from \"@vikadata/vika\";\r\nimport {message} from 'antd'\r\nconst config = {\r\n    token: 'uskjVVXAg5csX5P40bXnivo',\r\n    viewId:\"viwaZHVHwVMRJ\",\r\n}\r\n\r\nexport class VikaController {\r\n    constructor(props) {\r\n\r\n        /**\r\n         * 全局参数配置\r\n         */\r\n        const vika = new Vika({\r\n            /**\r\n             * (必填) string 你的 API Token，用于鉴权\r\n             */\r\n            token: config.token,\r\n            /**\r\n             * （选填）全局指定 field 的查询和返回的 key。默认使用列名  'name' 。指定为 'id' 时将以 fieldId 作为查询和返回方式（使用 id 可以避免列名的修改导致代码失效问题）\r\n             */\r\n            fieldKey: 'name', // 默认值\r\n            /**\r\n             * （选填）请求失效时间\r\n             */\r\n            requestTimeout: 60000, // 默认 60000ms (10 秒)\r\n            /**\r\n             * （选填）目标服务器地址\r\n             */\r\n            host: 'https://api.vika.cn/fusion/v1', // 默认值\r\n        });\r\n        this.datasheet = vika.datasheet(\"dstffTNeWj0bK9CUAB\");\r\n    }\r\n    getList(params){\r\n        return new Promise((resolve ,reject)=> {\r\n            this.datasheet.records.query({viewId:config.viewId}).then(res=>{\r\n                if(res.success){\r\n                    message.success('获取列表成功')\r\n                    resolve(res.data)\r\n                }else {\r\n                    message.error(res.message)\r\n                }\r\n            }).catch(err=>{\r\n                message.error(err)\r\n            })\r\n        })\r\n\r\n    }\r\n    getQuery(params) {\r\n        const {viewId,sort,recordIds,fields,filterByFormula,maxRecords,cellFormat,fieldKey}=params\r\n        // 获取记录\r\n        this.datasheet.record.query({\r\n            /**\r\n             * （选填）视图ID。默认为维格表中第一个视图。请求会返回视图中经过视图中筛选/排序后的结果，可以搭配使用fields参数过滤不需要的字段数据\r\n             */\r\n            viewId,\r\n            /**\r\n             * （选填）对指定维格表的记录进行排序。由多个“排序对象”组成的数组。支持顺序：'asc' 和 逆序：'desc'。注：此参数指定的排序条件将会覆盖视图里的排序条件。\r\n             */\r\n            sort,\r\n            /**\r\n             * （选填）recordIds 数组。如果附带此参数，则返回参数中指定的records数组。 返回值按照传入数组的顺序排序。此时无视筛选、排序。无分页，每次最多查询 1000 条\r\n             */\r\n            recordIds,\r\n            /**\r\n             * （选填）指定要返回的字段（默认为字段名, 也可以通过 fieldKey 指定为字段 Id）。如果附带此参数，则返回的记录合集将会被过滤，只有指定的字段会返回。\r\n             */\r\n            fields,\r\n            /**\r\n             * （选填）使用公式作为筛选条件，返回匹配的记录，访问 https://vika.cn/help/tutorial-getting-started-with-formulas/ 了解公式使用方式\r\n             */\r\n            filterByFormula,\r\n            /**\r\n             * （选填）限制返回记录的总数量。如果该值小于表中实际的记录总数，则返回的记录总数会被限制为该值。\r\n             */\r\n            maxRecords,\r\n            /**\r\n             * （选填）单元格值类型，默认为 'json'，指定为 'string' 时所有值都将被自动转换为 string 格式。\r\n             */\r\n            cellFormat,\r\n            /**\r\n             * （选填）指定 field 的查询和返回的 key。默认使用列名  'name' 。指定为 'id' 时将以 fieldId 作为查询和返回方式（使用 id 可以避免列名的修改导致代码失效问题）\r\n             */\r\n            fieldKey,\r\n        })\r\n\r\n    }\r\n     queryAll() {\r\n         return new Promise((resolve ,reject)=> {\r\n             this.datasheet.records.queryAll().then(res=>{\r\n                 if(res.success){\r\n                     message.success('获取列表全部成功')\r\n                     resolve(res.data)\r\n                 }else {\r\n                     message.error(res.message)\r\n                 }\r\n             }).catch(err=>{\r\n                 message.error(err)\r\n             })\r\n         })\r\n\r\n    }\r\n    add(params){\r\n        // add 方法接收一个数组值，可以同时创建多条 record，单次请求可最多创建10条 record\r\n\r\n        return new Promise((resolve ,reject)=> {\r\n            this.datasheet.records.create(params).then(res=>{\r\n                if(res.success){\r\n                    message.success('新增成功')\r\n                    resolve(res.data)\r\n                }else {\r\n                    message.error(res.message)\r\n                }\r\n            }).catch(err=>{\r\n                message.error(err)\r\n            })\r\n        })\r\n    }\r\n    update(params){\r\n        return new Promise((resolve ,reject)=> {\r\n            this.datasheet.records.update(params).then(res=>{\r\n                if(res.success){\r\n                    message.success('更新成功')\r\n                    resolve(res.data)\r\n                }else {\r\n                    message.error(res.message)\r\n                }\r\n            }).catch(err=>{\r\n                message.error(err)\r\n            })\r\n        })\r\n    }\r\n    del(params){\r\n        return new Promise((resolve ,reject)=> {\r\n            this.datasheet.records.delete(params).then(res=>{\r\n                if(res.success){\r\n                    message.success('删除成功')\r\n                    resolve(res.data)\r\n                }else {\r\n                    message.error(res.message)\r\n                }\r\n            }).catch(err=>{\r\n                message.error(err)\r\n            })\r\n        })\r\n    }\r\n    upload(file){\r\n        return new Promise((resolve ,reject)=> {\r\n            this.datasheet.records.upload(file).then(res=>{\r\n                if(res.success){\r\n                    message.success('上传成功')\r\n                    resolve(res.data)\r\n                }else {\r\n                    message.error(res.message)\r\n                }\r\n            }).catch(err=>{\r\n                message.error(err)\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n\r\n","import './App.less';\nimport {Calendar, ConfigProvider, Modal, TimePicker, Badge, Button, message} from 'antd'\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport moment from 'moment';\nimport React from 'react';\nimport {CheckCircleTwoTone} from '@ant-design/icons';\nimport 'moment/locale/zh-cn';\nimport {VikaController} from './vika'\n\nmoment.locale('zh-cn');\n\nconst Vika = new VikaController()\n\nconst App = () => {\n    const [visible, setVisible] = React.useState(false);\n    const [confirmLoading, setConfirmLoading] = React.useState(false);\n    const [curDay, updateDay] = React.useState('');\n    const [selectTime, updateSelectTime] = React.useState('');\n    const [list, updateList] = React.useState([])\n    const [currentKey, updateCurrentKey] = React.useState(-1)\n\n    const VikaAddHandle = async (data) => {\n        const params = [\n            {\n                \"fields\": {\n                    \"标题\": data.text,\n                    \"开始时间\": data.timeStamp,\n                    data: data.data\n                }\n            }\n        ]\n        await Vika.add(params)\n\n    }\n    const getList = () => Vika.getList()\n    const edit = () => {\n        const params = [\n            {\n                recordId: 'recQ5xjnz8QDU',\n                \"fields\": {\n                    \"标题\": \"edit\",\n                    \"开始时间\": new Date().getTime()\n                }\n            }\n        ]\n        Vika.update(params)\n    }\n    const del = () => {\n        const params = [\n            'recQ5xjnz8QDU'// recordId:\n        ]\n        Vika.del(params)\n    }\n    const handleOk = async () => {\n        const index = list.findIndex(item => moment(curDay).isSame(moment(item.fields['开始时间']), 'day'))\n        const [str, str2] = formatTime(selectTime[0], selectTime[1])\n        const title = `打卡时间${str},打卡时长${str2}`\n        const startTime = moment(curDay).format()\n        if (index !== -1) {\n            //编辑\n            const recordId = list[index].recordId\n            await Vika.update([{\n                recordId,\n                \"fields\": {\n                    \"标题\": title,\n                    \"开始时间\": startTime\n                }\n            }])\n        } else {\n            await VikaAddHandle({text: title, timeStamp: startTime})\n\n        }\n        updateList([...list])\n        updateSelectTime()\n        setVisible(false);\n        await refresh()\n    };\n\n    const handleCancel = () => {\n        console.log('Clicked cancel button');\n        setVisible(false);\n    };\n    const formatTime = (start, end) => {\n        let start_date = moment(start, \"YYYY-MM-DD HH:mm:ss\")\n        let end_date = moment(end, \"YYYY-MM-DD HH:mm:ss\")\n\n        let seconds, mintus, hours;\n        seconds = end_date.diff(start_date, \"seconds\");\n        hours = parseInt(seconds / 60 / 60);\n        mintus = Math.round((seconds - hours * 60 * 60) / 60)\n        let str = `${start_date.format('HH:mm')}--${end_date.format('HH:mm')}`\n        let str2 = `${moment(curDay).format('YYYY-MM-DD')},${hours}小时${mintus}分`\n        return [str, str2]\n    }\n    const getListData = (value) => {\n        for (let i = 0; i < list.length; i++) {\n            let item = list[i]\n            if (moment(value).isSame(moment(item.fields['开始时间']), 'day')) {\n                return item\n            }\n        }\n    }\n    const dateCellRender = (value) => {\n        let data = getListData(value)\n        if (data !== undefined) {\n            console.log(data)\n            return (\n                <>\n                    <Badge status=\"success\" text={data.fields['标题']}/>\n                </>\n\n            )\n        }\n\n\n    }\n    const selectHandle = (date) => {\n        setVisible(true)\n        updateDay(date)\n        const index = list.findIndex(item => moment(date).isSame(moment(item.fields['开始时间']), 'day'))\n        updateCurrentKey(index)\n\n    }\n    const timePickerChange = (date) => {\n        console.log(moment(curDay).format('YYYYMMDD'))\n        updateCurrentKey()\n        updateSelectTime(date)\n\n    }\n    const refresh = async () => {\n        const res = await Vika.getList()\n        list.splice(0, list.length, ...res.records)\n        console.log(list)\n        updateList([...list])\n    }\n    const handleDel = () => {\n\n    }\n    return (\n        <ConfigProvider locale={zhCN}>\n            <div className=\"App\">\n\n                <Modal\n                    title=\"打卡\"\n                    visible={visible}\n                    onOk={handleOk}\n                    confirmLoading={confirmLoading}\n                    onCancel={handleCancel}\n                    footer={[\n                        <Button key=\"back\" onClick={handleCancel}>\n                            取消\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\n                            {currentKey ===-1 ? '添加': '修改'}\n                        </Button>,\n                        <Button\n                            key='del'\n                            type='danger'\n                            style={{display:currentKey!==-1 ? 'inline-block' :\"none\"}}\n                            onClick={handleDel}\n                        >\n                            删除\n                        </Button>,\n                    ]}\n                >\n                    <TimePicker.RangePicker value={selectTime} onChange={timePickerChange} showNow={true}/>\n                </Modal>\n                <Button onClick={refresh}>更新</Button>\n                <Calendar dateCellRender={dateCellRender}\n                          onSelect={selectHandle}\n                />\n\n            </div>\n        </ConfigProvider>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n          <App />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}